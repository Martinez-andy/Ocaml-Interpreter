(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;
  
(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;
  
(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values 
 *)

module type ENV = sig
    (* the type of environments *)
    type env
	   
    (* the type of values (including closures) stored in
       environments *)
    type value =
      | Val of expr
      | Closure of (expr * env)
   
    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string
                                 
    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : ENV =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    let empty () : env = []

    (* Stage 8 *)
    let close (exp : expr) (env : env) : value =
      Closure(exp, env) ;;

    let rec lookup (env : env) (varname : varid) : value =
      match env with
      | [] -> raise (EvalError "Var could not be found")
      | (var, val_ref) :: tl ->
        if var = varname then !val_ref
        else lookup tl varname ;;

    let rec extend (env : env) (varname : varid) (loc : value ref) : env =
      match env with
      | [] -> [(varname, loc)]
      | (var, val_ref) :: tl -> 
        if var = varname then (var, loc) :: tl
        else (var, val_ref) :: (extend tl varname loc) ;;
(*
    let rec extend (env : env) (varname : varid) (loc : value ref) : env =
      match env with
      | [] -> [(varname, loc)]
      | (var, val_ref) :: tl -> 
        if var = varname then (val_ref := !loc; env)
        else (var, val_ref) :: (extend tl varname loc) ;;
*)

    let rec env_to_string (env : env) : string =
      let helper ((ele_var, ele_val): varid * value ref) : string =
        ele_var ^ (value_to_string !ele_val) in
      (List.fold_left (fun acc x -> acc ^ helper x) "{" env) ^ "}" 

    and value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with
      | Val(input) -> exp_to_concrete_string input 
      | Closure(expr, env) -> 
        if printenvp then "Closure(" ^ exp_to_concrete_string expr ^ ", " ^ env_to_string env ^ ")"
        else
           "Closure(" ^ exp_to_concrete_string expr ^ ")" 
  
      (* Help with the string functions! *)
  end
;;

(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an environment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
   
let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

let extract (input: Env.value) : expr =
  match input with
  | Env.Val(expression)
  | Env.Closure(expression, _) -> expression ;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)
   
let rec eval_s (exp : expr) (_env : Env.env) : Env.value =
 let open Env in
  match exp with
  | Num(_) 
  | Bool(_)  
  | Fun(_, _) -> Val(exp) 
  | Raise -> raise EvalException (* Only when raise but bad input returns evalerror *)
  | Unassigned -> raise (EvalError "Unassigned")
  | Var(_) -> raise (EvalError "Unbound variable") (* Is this the proper way of returning an error? Should I even be returning an error? *)
  | Unop(_, arg) -> 
    (match extract (eval_s arg (empty ())) with
    | Num(num) -> Val(Num(~-num))
    | _ -> raise (EvalError"Cannot negate non-integers")) (* Am I handling errors properly? *)
  | Binop (operator, arg1, arg2) -> 
    (match extract (eval_s arg1 (empty())), 
    extract (eval_s arg2 (empty ())) with
      | Num(num1), Num(num2) -> 
        (let execute_op (op: binop) : expr =
          match op with
          | Plus -> Num(num1 + num2) 
          | Minus -> Num(num1 - num2)
          | Times -> Num(num1 * num2)
          | Equals -> Bool(num1 = num2)
          | LessThan -> Bool(num1 < num2) in
        Val(execute_op operator))
      | Bool(boolean1), Bool(boolean2) ->
        (let exe_op_bool (op: binop) : expr =
          match op with
          | Equals -> Bool(boolean1 = boolean2)
          | LessThan -> Bool(boolean1 < boolean2) 
          | _ -> raise (EvalError "Binop: Inappropriate types") in
        Val(exe_op_bool operator))
      | _, _ -> raise (EvalError "Binop: Inappropriate types"))
  | Conditional(condition, return, otherwise) ->
    (match extract (eval_s condition (empty ())) with
    | Bool(boolean) ->
      (if boolean then eval_s return (empty ())
      else eval_s otherwise (empty ()))
    | _ -> raise (EvalError "Conditional: condition not of type bool"))
  | Let (var, def, body) -> 
    eval_s (subst var (extract (eval_s def (empty ()))) body) (empty ())
  | Letrec (var, def, body) -> 
    let v_d = extract (eval_s def (empty ())) in 
    eval_s (subst var 
    (extract (eval_s (subst var (Letrec(var, v_d, Var(var))) v_d) 
    (empty ()))) body) (empty ()) 
  | App (f, argument) -> 
    match extract (eval_s f (empty ())) with
    | Fun(var, body) -> 
      eval_s (subst var (extract (eval_s argument (empty ()))) body) (empty ())
    | _ -> raise (EvalError "Non functions cannot be applied") ;; 

      (* Could be a funciton applied to a funciton *)
      (* Evalute f *)
      (* pattern match f to make sure it's a funciton *)

  (* 
    How to handle variables?
      Do I just return raise?
      For App, need I use eval_s on function even though functions evaluate to themselves?
      How do I handle inappropreiate operations? Do I use "try with" and then return Raise if an error arrises? 
      Can I just pattern match with a function? 
    Am I correct so far?
  *)
     
(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)
   
(* Stage 9 *)
let rec eval_d (exp : expr) (env : Env.env) : Env.value =
  let open Env in
  match exp with
  | Num(_) 
  | Bool(_) 
  | Fun(_) -> Val(exp)
  | Raise -> raise (EvalException)
  | Unassigned -> raise (EvalError "Unassigned")
  | Var(variable) -> lookup env variable
  | Unop(_, arg) -> 
    (match extract (eval_d arg env) with
      | Num(num) -> Val(Num(~-num))
      | _ -> raise (EvalError "Can only negate ints"))
  | Binop(operator, arg1, arg2) -> 
    (match extract (eval_d arg1 env), 
    extract (eval_d arg2 env) with
      | Num(num1), Num(num2) -> 
        (let execute_op (op: binop) : expr =
          match op with
          | Plus -> Num(num1 + num2) 
          | Minus -> Num(num1 - num2)
          | Times -> Num(num1 * num2)
          | Equals -> Bool(num1 = num2)
          | LessThan -> Bool(num1 < num2) in
        Val(execute_op operator))
      | Bool(boolean1), Bool(boolean2) ->
        (let exe_op_bool (op: binop) : expr =
          match op with
          | Equals -> Bool(boolean1 = boolean2)
          | LessThan -> Bool(boolean1 < boolean2)
          | _ -> raise (EvalError "Binop: Inappropriate types") in
        Val(exe_op_bool operator))
      | _, _ -> raise (EvalError "Binop: Inappropriate types"))
  | Conditional(con, return, othwse) -> 
    (match extract (eval_d con env) with
      | Bool(boolean) ->
        (if boolean then eval_d return env
        else eval_d othwse env)
      | _ -> raise (EvalError "Conditional: condition not of type bool"))
  | Let (var, def, body)
  | Letrec (var, def, body) -> 
    eval_d body (extend env var (ref (eval_d def env)))
  | App (f, argument) ->
    match extract (eval_d f env) with
    | Fun(var, body) -> 
      eval_d body (extend env var (ref (eval_d argument env)))
    | _ -> raise (EvalError "Non functions cannot be applied") ;; 



(* Questions:
   Help with env module
   - What are the strings supposed to look like?
   - Extend: How do I make sure the output is physically equal
   Help with eval_d
   - Are lets and function applications the only thing that update environments? 
   - Help with implementing App, let, and letrec
*)


(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)

(* Lexical only changed Fun and App, right? *)
let rec eval_l (exp : expr) (env : Env.env) : Env.value =
  let open Env in
  match exp with
  | Num(_) 
  | Bool(_) -> Val(exp)
  | Raise -> raise (EvalException)
  | Unassigned -> Val(Unassigned) (* Is this how I deal with unassigned *)
  | Var(variable) -> lookup env variable (* Is the error here? *)
  | Fun(_) -> close exp env (* Why no work? *)
  | Unop(_, arg) -> 
    (match extract (eval_l arg env) with
      | Num(num) -> Val(Num(~-num))
      | _ -> raise (EvalError""))
  | Binop(operator, arg1, arg2) -> 
    (match extract (eval_l arg1 env), 
    extract (eval_l arg2 env) with
      | Num(num1), Num(num2) -> 
        (let execute_op (op: binop) : expr =
          match op with
          | Plus -> Num(num1 + num2) 
          | Minus -> Num(num1 - num2)
          | Times -> Num(num1 * num2)
          | Equals -> Bool(num1 = num2)
          | LessThan -> Bool(num1 < num2) in
        Val(execute_op operator))
      | Bool(boolean1), Bool(boolean2) ->
        (let exe_op_bool (op: binop) : expr =
          match op with
          | Equals -> Bool(boolean1 = boolean2)
          | LessThan -> Bool(boolean1 < boolean2)
          | _ -> raise (EvalError "Binop: Inappropriate types") in
        Val(exe_op_bool operator))
      | _, _ -> raise (EvalError "Binop: Inappropriate types"))
  | Conditional(con, return, othwse) -> 
    (match extract (eval_l con env) with
      | Bool(boolean) ->
        (if boolean then eval_l return env
        else eval_l othwse env)
      | _ -> raise (EvalError "Conditional: condition not of type bool"))
  | Let (var, def, body) -> 
    (eval_l body (extend env var (ref (eval_l def env))))
  | Letrec (var, def, body) ->
    (let reference = ref (Val(Unassigned)) in
    let env' = extend env var reference in
    let v_d = eval_l def env' in
    reference := v_d;
    eval_l body env')
  | App (f, argument) ->
    match eval_l f env with
    | Val(_) -> raise (EvalError "funtion has no closure.")
    | Closure(func, env_l) -> 
      match func with
      | Fun(var, body) -> 
        (eval_l body (extend env_l var (ref (eval_l argument env))))
      | _ -> raise (EvalError "Non functions cannot be applied") ;;

(* 3 Questions *)
(*
   - Help with function applicaiton on lexical environments
   - Is my return value for Unassigned correct?
   - Are letrec, App, Fun the only constructs that require changing in lexical semantics?
*)

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within `eval_s`, `eval_d`, or `eval_l`. *)

let rec eval_e (exp : expr) (env : Env.env) : Env.value =
  let open Env in
  match exp with
  | Num(_) 
  | Bool(_) 
  | Float(_) -> Val(exp)
  | Raise -> raise (EvalException)
  | Unassigned -> Val(Unassigned) (* Is this how I deal with unassigned *)
  | Var(variable) -> lookup env variable (* Is the error here? *)
  | Fun(_) -> close exp env (* Why no work? *)
  | Unop(operator, arg) -> 
    (match extract (eval_e arg env), operator with
      | Num(num), Negate -> Val(Num(~-num))
      | Float(flo), FloatNeg -> Val(Float(~-.flo))
      | _ -> raise (EvalError "Unop inappropriate types"))
  | Binop(operator, arg1, arg2) -> 
    (match extract (eval_e arg1 env), 
      extract (eval_e arg2 env) with
      | Num(num1), Num(num2) -> 
        (let execute_op (op: binop) : expr =
          match op with
          | Plus -> Num(num1 + num2) 
          | Minus -> Num(num1 - num2)
          | Times -> Num(num1 * num2)
          | Equals -> Bool(num1 = num2)
          | LessThan -> Bool(num1 < num2)
          | _ -> raise (EvalError "Binop: Inappropriate types")
        in
        Val(execute_op operator))
      | Bool(boolean1), Bool(boolean2) ->
        (let exe_op_bool (op: binop) : expr =
          match op with
          | Equals -> Bool(boolean1 = boolean2)
          | LessThan -> Bool(boolean1 < boolean2)
          | _ -> raise (EvalError "Binop: Inappropriate types") in
        Val(exe_op_bool operator))
      | Float(flo1), Float(flo2) ->
        (let execute_float_op (flo_op: binop) : expr =
          match flo_op with
          | FloatPlus -> Float(flo1 +. flo2)
          | FloatMinus -> Float(flo1 -. flo2)
          | FloatTimes -> Float(flo1 *. flo2)
          | FloatDivide -> Float(flo1 /. flo2)
          | LessThan -> Bool(flo1 < flo2)
          | Equals -> Bool(flo1 = flo2)
          | _ -> raise (EvalError "Binop: Inappropriate types") in
        Val(execute_float_op operator))
      | _, _ -> raise (EvalError "Binop: Inappropriate types"))
  | Conditional(con, return, othwse) -> 
    (match extract (eval_e con env) with
      | Bool(boolean) ->
        (if boolean then eval_e return env
        else eval_e othwse env)
      | _ -> raise (EvalError "Conditional: condition not of type bool"))
  | Let (var, def, body) -> 
    eval_e body (extend env var (ref (eval_e def env)))
  | Letrec (var, def, body) ->
    (let reference = ref (Val(Unassigned)) in
    let env' = extend env var (reference) in
    let v_d = eval_e def env' in
    reference := v_d;
    eval_e body env')
  | App (f, argument) ->
    match eval_e f env with
    | Val(_) -> raise (EvalError "funtion has no closure.")
    | Closure(func, env_e) -> 
      match func with
      | Fun(var, body) -> 
        eval_e body (extend env_e var (ref (eval_e argument env)))
      | _ -> raise (EvalError "Non functions cannot be applied") ;;

(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, `evaluate` is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the `evaluate` function, so it doesn't matter how it's
   set when you submit your solution.) *)
   
let evaluate = eval_e ;;

(*
   Error in dynamic with

    let x = 10 in 
    let f = fun y -> fun z -> z * (x + y) in 
    let y = 12 in 
    f 11 2 ;;

*)
